# Based Upon...
##########################################
# COMMUNITY GUI SUPEREVENT EVENT WINDOWS #
##########################################

# All superevent windows are capped at 1280x800, the resolution of the Steam Deck
# It currently doesn't seem possible to make an event window automatically stretch to the whole screen; this seems to be from the behavior of default_popup_two_lines
# event_window_superevent_newspaper & event_window_superevent_newspaper_full are modified from the Newpapers mod by Bananaman & Klein648

########################################

# Copied over from default window
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

########################################



	

types nda_superevent_window_types {
	
	### BASED ON - SUPEREVENT CLASSIC WINDOW (FULL WINDOW BACKGROUND)
	# This window stretches the background video/texture to fill the entire window
	
	type nda_event_window_full = event_window {
		name = "nda_event_window_full"
		
        using = hud_visibility
        using = Animation_ShowHide_Standard

        blockoverride "event_window_full_block" {			
            icon = {
                parentanchor = center
                size = { 100% 100% }
                texture = "gfx/interface/backgrounds/not_yet_initialized.dds"
                using = clickthrough_blocker
            }

            widget = {
                alpha = 0
                using = Animation_ShowHide_Standard
                size = { 100% 70% }
                parentanchor = center
                layer = popups

                datacontext = "[EventWindow.GetEvent]"

                state = {
                    name = sound
                    trigger_on_create = yes
                    start_sound = {
                        using = ui_sfx_global_popup
                    }
                }

                state = {
                    trigger_on_create = yes
                    name = 1
                    duration = 0.3
                    using = Animation_Curve_EaseOut
                    alpha = 1
                    using = Snapshot_Mute_World_100
                    using = Snapshot_Mute_Vfx_War_100
                    start_sound = {
                        soundeffect = "[Event.GetOnOpenedSoundEvent]"
                    }
                }

                state = {
                    trigger_when = "[Not(TimeKeeper.IsPaused)]"
                    on_finish = "[TimeKeeper.TogglePause]"
                }
				
				widget = {
					state = {
						name = _show
						start_sound = {
							soundeffect = "snapshot:/Dynamic/mute_mx_100"
						}
					}
				}

                icon = {
                    position = { -1% 0 }
                    size = { 102% 100% }
                    spriteType = Corneredtiled
                    spriteborder = { 14 14 }
                    texture = "gfx/interface/backgrounds/rounded_bg.dds"
                    texture_density = 2

                    modify_texture = {
                        texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                        spriteType = Corneredstretched
                        spriteborder = { 0 0 }
                        blend_mode = overlay
                        alpha = 0.8
                    }
                    modify_texture = {
                        using = texture_velvet
                    }
                    modify_texture = {
                        using = texture_cloth
                        alpha = 0.7
                    }
                    modify_texture = {
                        texture = "gfx/interface/masks/fade_top_illus.dds"
                        translate_uv = { 0 0 }
                        blend_mode = alphamultiply
                    }
                }

                widget = {
                    # image in case we have no video?
                    position = { 0 0 }
                    size = { 100% 100% }
                    parentanchor = center

                    icon = {
                        visible = "[Event.HasTexture]"
                        texture = "[Event.GetTexture]"
                        alwaystransparent = yes
                        size = { 100% 100% }
                        parentanchor = center

                        modify_texture = {
                            using = texture_cloth
                            alpha = 0.8
                        }
                        modify_texture = {
                            texture = "gfx/interface/masks/fade_vertical_center.dds"
                            translate_uv = { 0 0 }
                            blend_mode = alphamultiply
                        }
                    }

                    # animated video ( most images should have this )
                    video_icon = {
                        visible = "[Event.HasVideo]"
                        video = "[Event.GetVideo]"
                        size = { 100% 100% }
                        alwaystransparent = yes
                        loop = no
                        parentanchor = center

                        modify_texture = {
                            using = texture_cloth
                            alpha = 0.8
                        }
                        modify_texture = {
                            texture = "gfx/interface/masks/fade_vertical_center.dds"
                            translate_uv = { 0 0 }
                            blend_mode = alphamultiply
                        }
                    }
                }

                flowcontainer = {
                    minimumsize =  { -1 606 } # { -1 606 }
                    direction = vertical
                    spacing = 20
                    parentanchor = center # right|vcenter
                    margin = { 25 40 }

                    background = {
                        using = entry_bg_simple_solid
                        margin = { -15 -20 }
                    }

                    default_header_clean_faded = {
                        size = { 600 100 } #= { 500 50 }
                        position = { 0 0 }
                        parentanchor = center
                        blockoverride "text" {}
                        textbox = {
                            raw_text = "#BOLD [EventWindow.GetTitle]#!"
                            parentanchor = center
                            position = { 0 -2 }
                            autoresize = yes
                            max_width = 600
                            elide = right
                            using = fontsize_mega
                        }
                    }

                    textbox = {
                        name = "description"
                        multiline = yes
                        autoresize = yes
                        minimumsize =  { 580 -1 }#  { 480 -1 }
                        maximumsize =  { 580 -1 } #{ 520 -1 }
                        parentanchor = top|hcenter
                        align = hcenter|nobaseline
                        raw_text = "#bold [EventWindow.GetDescription]#!"
                        margin = { 10 0 }
                        using = fontsize_large
                    }

                    divider_decorative = {}

                    textbox = {
                        name = "flavortext"
                        multiline = yes
                        autoresize = yes
                        minimumsize =  { 580 -1 }#  { 480 -1 }
                        maximumsize =  { 580 -1 }#  { 480 -1 }
                        parentanchor = top|hcenter
                        align = top|left
                        raw_text = "#lore [EventWindow.GetFlavor]#!"
                        margin = { 30 10 }
                    }

                    widget = { size = { 20 10 }}

                    flowcontainer = {
                        direction = vertical
                        using = default_list_position
                        datamodel = "[EventWindow.GetOptions]"
                        spacing = 5

                        item = {
                            container = {

                                widget = {
                                    visible = "[EventOption.IsHighlightedOption]"

                                    button = {
                                        size = { 96% 100% }
                                        parentanchor = hcenter
                                        using = default_button_primary_action
                                        onclick = "[EventOption.Select]"
                                        tooltip = "[EventOption.GetDesc]"
                                        using = tooltip_ws
                                        enabled = "[EventOption.IsEnabled]"
                                        using = confirm_button_sound
                                    }

                                    textbox = {
                                        resizeparent = yes
                                        minimumsize = { 500 42 }
                                        maximumsize = { 500 -1 }
                                        text = "[EventOption.GetText]"
                                        multiline = yes
                                        align = hcenter|nobaseline
                                        autoresize = yes
                                        margin = { 30 10 }
                                    }
                                }

                                widget = {
                                    visible = "[Not(EventOption.IsHighlightedOption)]"

                                    button = {
                                        size = { 96% 100% }
                                        parentanchor = hcenter
                                        using = default_button_action
                                        onclick = "[EventOption.Select]"
                                        tooltip = "EVENT_OPTION_TOOLTIP"
                                        using = tooltip_ws
                                        enabled = "[EventOption.IsEnabled]"
                                        using = confirm_button_sound
                                    }

                                    textbox = {
                                        resizeparent = yes
                                        minimumsize = { 500 42 }
                                        maximumsize = { 500 -1 }
                                        text = "[EventOption.GetText]"
                                        multiline = yes
                                        align = hcenter|nobaseline
                                        autoresize = yes
                                        margin = { 30 10 }
                                    }

                                    ### Time until the default option will be picked
                                    round_progress_default = {
                                        visible = "[EventOption.IsDefaultOption]"
                                        parentanchor = right|vcenter
                                        position = { 0 0.5 }
                                        size = { 27 27 }
                                        tooltip = "DEFAULT_EVENT_OPTION"
                                        value = "[Event.GetPercentageRemainingDays]"

                                        icon = {
                                            size = { 26 26 }
                                            position = { -0.2 -0.2 }
                                            parentanchor = center
                                            texture = "gfx/interface/icons/generic_icons/event_default_option.dds"
                                        }
                                    }
                                }
                            }
                        }
                    }

                    button = {
                        parentanchor = hcenter
                        visible = "[InDebugMode]"
                        size = { 480 62 }
                        using = default_button
                        raw_text = "DEBUG: Open Event in text editor"
                        onclick = "[EventWindow.AccessEvent.OpenInEditor]"
                    }

                    textbox = {
                        background = {
                            using = default_background
                        }
                        parentanchor = hcenter
                        size = { 480 62 }
                        visible = "[InDebugMode]"
                        raw_text = "DEBUG: Trigger description"
                        tooltip = "[Event.GetTriggerDesc]"
                        align = hcenter|nobaseline
                    }

                    textbox = {
                        visible = "[InDebugMode]"
                        parentanchor = hcenter
                        align = hcenter
                        raw_text = "Event ID: [Event.GetKey|v]"
                    }
                }
            }
        }	
	
		blockoverride "event_dlc_icon" {		
			flowcontainer = {
				visible = "[Event.IsDLCContent]"
				tooltip = "EVENT_DLC_TOOLTIP"
				spacing = 10
				parentanchor = bottom|left
				position = { 30 -20 }

				icon = {
					size = { 40 40 }
					texture = "gfx/interface/backgrounds/round_frame_dec.dds"
					parentanchor = bottom|left

					icon = {
						size = { 40 40 }
						position = { 2 -2 }

						texture = "[Event.GetDLCIcon]"
						parentanchor = center

					}
				}

				textbox = {
					size = { 150 20 }
					align = left|vcenter
					parentanchor = left|vcenter
					elide = right
					using = fontsize_large
					fontsize_min = 12
					alpha = 0.7

					text = "[Event.GetDLCName]"
				}
			}
		}			

	}	
	
	### BASED ON - SUPEREVENT CLASSIC WINDOW (FULL WINDOW BACKGROUND)
	# This window stretches the background video/texture to fill the entire window
	
	type nda_event_window_conjunction_full = event_window {
		name = "nda_event_window_conjunction_full"
		
        using = hud_visibility
        using = Animation_ShowHide_Standard

        blockoverride "event_window_full_block" {
            icon = {
                parentanchor = center
                size = { 100% 100% }
                texture = "gfx/interface/backgrounds/not_yet_initialized.dds"
                using = clickthrough_blocker
            }

            widget = {
                alpha = 0
                using = Animation_ShowHide_Standard
                size = { 100% 70% }
                parentanchor = center
                layer = popups

                datacontext = "[EventWindow.GetEvent]"

                state = {
                    name = sound
                    trigger_on_create = yes
                    start_sound = {
                        using = ui_sfx_global_popup
                    }
                }

                state = {
                    trigger_on_create = yes
                    name = 1
                    duration = 0.3
                    using = Animation_Curve_EaseOut
                    alpha = 1
                    using = Snapshot_Mute_World_100
                    using = Snapshot_Mute_Vfx_War_100
                    start_sound = {
                        soundeffect = "[Event.GetOnOpenedSoundEvent]"
                    }
                }

                state = {
                    trigger_when = "[Not(TimeKeeper.IsPaused)]"
                    on_finish = "[TimeKeeper.TogglePause]"
                }
				
				widget = {
					state = {
						name = _show
						start_sound = {
							soundeffect = "snapshot:/Dynamic/mute_mx_100"
						}
					}
				}

                icon = {
                    position = { -1% 0 }
                    size = { 102% 100% }
                    spriteType = Corneredtiled
                    spriteborder = { 14 14 }
                    texture = "gfx/interface/backgrounds/rounded_bg.dds"
                    texture_density = 2

                    modify_texture = {
                        texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                        spriteType = Corneredstretched
                        spriteborder = { 0 0 }
                        blend_mode = overlay
                        alpha = 0.8
                    }
                    modify_texture = {
                        using = texture_velvet
                    }
                    modify_texture = {
                        using = texture_cloth
                        alpha = 0.7
                    }
                    modify_texture = {
                        texture = "gfx/interface/masks/fade_top_illus.dds"
                        translate_uv = { 0 0 }
                        blend_mode = alphamultiply
                    }
                }

                widget = {
                    # image in case we have no video?
                    position = { 0 0 }
                    size = { 100% 100% }
                    parentanchor = center

                    icon = {
                        visible = "[Event.HasTexture]"
                        texture = "[Event.GetTexture]"
                        alwaystransparent = yes
                        size = { 100% 100% }
                        parentanchor = center

                        modify_texture = {
                            using = texture_cloth
                            alpha = 0.8
                        }
                        modify_texture = {
                            texture = "gfx/interface/masks/fade_vertical_center.dds"
                            translate_uv = { 0 0 }
                            blend_mode = alphamultiply
                        }
                    }

                    # animated video ( most images should have this )
                    video_icon = {
                        visible = "[Event.HasVideo]"
                        video = "[Event.GetVideo]"
                        size = { 100% 100% }
                        alwaystransparent = yes
                        loop = no
                        parentanchor = center

                        modify_texture = {
                            using = texture_cloth
                            alpha = 0.8
                        }
                        modify_texture = {
                            texture = "gfx/interface/masks/fade_vertical_center.dds"
                            translate_uv = { 0 0 }
                            blend_mode = alphamultiply
                        }
                    }
                }

                flowcontainer = {
                    minimumsize = { -1 606 }
                    direction = vertical
                    spacing = 20
                    parentanchor = right|vcenter
                    margin = { 25 40 }

                    background = {
                        using = entry_bg_simple_solid
                        margin = { -15 -20 }
                    }

                    default_header_clean_faded = {
                        size = { 600 100 } #= { 500 50 }
                        position = { 0 0 }
                        parentanchor = center
                        blockoverride "text" {}
                        textbox = {
                            raw_text = "#BOLD [EventWindow.GetTitle]#!"
                            parentanchor = center
                            position = { 0 -2 }
                            autoresize = yes
                            max_width = 600
                            elide = right
                            using = fontsize_mega
                        }
                    }

                    textbox = {
                        name = "description"
                        multiline = yes
                        autoresize = yes
                        minimumsize = { 480 -1 }
                        maximumsize = { 520 -1 }
                        parentanchor = top|hcenter
                        align = hcenter|nobaseline
                        raw_text = "#bold [EventWindow.GetDescription]#!"
                        margin = { 10 0 }
                        using = fontsize_large
                    }

                    divider_decorative = {}

                    textbox = {
                        name = "flavortext"
                        multiline = yes
                        autoresize = yes
                        minimumsize = { 480 -1 }
                        maximumsize = { 480 -1 }
                        parentanchor = top|hcenter
                        align = top|left
                        raw_text = "#lore [EventWindow.GetFlavor]#!"
                        margin = { 30 10 }
                    }

                    widget = { size = { 20 10 }}

                    flowcontainer = {
                        direction = vertical
                        using = default_list_position
                        datamodel = "[EventWindow.GetOptions]"
                        spacing = 5

                        item = {
                            container = {

                                widget = {
                                    visible = "[EventOption.IsHighlightedOption]"

                                    button = {
                                        size = { 96% 100% }
                                        parentanchor = hcenter
                                        using = default_button_primary_action
                                        onclick = "[EventOption.Select]"
                                        tooltip = "[EventOption.GetDesc]"
                                        using = tooltip_ws
                                        enabled = "[EventOption.IsEnabled]"
                                        using = confirm_button_sound
                                    }

                                    textbox = {
                                        resizeparent = yes
                                        minimumsize = { 500 42 }
                                        maximumsize = { 500 -1 }
                                        text = "[EventOption.GetText]"
                                        multiline = yes
                                        align = hcenter|nobaseline
                                        autoresize = yes
                                        margin = { 30 10 }
                                    }
                                }

                                widget = {
                                    visible = "[Not(EventOption.IsHighlightedOption)]"

                                    button = {
                                        size = { 96% 100% }
                                        parentanchor = hcenter
                                        using = default_button_action
                                        onclick = "[EventOption.Select]"
                                        tooltip = "EVENT_OPTION_TOOLTIP"
                                        using = tooltip_ws
                                        enabled = "[EventOption.IsEnabled]"
                                        using = confirm_button_sound
                                    }

                                    textbox = {
                                        resizeparent = yes
                                        minimumsize = { 500 42 }
                                        maximumsize = { 500 -1 }
                                        text = "[EventOption.GetText]"
                                        multiline = yes
                                        align = hcenter|nobaseline
                                        autoresize = yes
                                        margin = { 30 10 }
                                    }

                                    ### Time until the default option will be picked
                                    round_progress_default = {
                                        visible = "[EventOption.IsDefaultOption]"
                                        parentanchor = right|vcenter
                                        position = { 0 0.5 }
                                        size = { 27 27 }
                                        tooltip = "DEFAULT_EVENT_OPTION"
                                        value = "[Event.GetPercentageRemainingDays]"

                                        icon = {
                                            size = { 26 26 }
                                            position = { -0.2 -0.2 }
                                            parentanchor = center
                                            texture = "gfx/interface/icons/generic_icons/event_default_option.dds"
                                        }
                                    }
                                }
                            }
                        }
                    }

                    button = {
                        parentanchor = hcenter
                        visible = "[InDebugMode]"
                        size = { 480 62 }
                        using = default_button
                        raw_text = "DEBUG: Open Event in text editor"
                        onclick = "[EventWindow.AccessEvent.OpenInEditor]"
                    }

                    textbox = {
                        background = {
                            using = default_background
                        }
                        parentanchor = hcenter
                        size = { 480 62 }
                        visible = "[InDebugMode]"
                        raw_text = "DEBUG: Trigger description"
                        tooltip = "[Event.GetTriggerDesc]"
                        align = hcenter|nobaseline
                    }

                    textbox = {
                        visible = "[InDebugMode]"
                        parentanchor = hcenter
                        align = hcenter
                        raw_text = "Event ID: [Event.GetKey|v]"
                    }


                }

				
				widget = {
                    position = { 0 0 }

                    parentanchor = center
					size = { 600 300 }
					parentanchor = hcenter

					flowcontainer = {
						direction = vertical
						#using = default_list_position
						parentanchor = hcenter

						background = {
							using = entry_bg_simple_solid
							margin = { 50 5 }
						}

						default_header_clean_faded = {
							size = { 500 50 }
							position = { 0 0 }
							parentanchor = center
							blockoverride "text" {}
							textbox = {
								raw_text = "Coven Leaders"
								parentanchor = center
								position = { 0 -2 }
								autoresize = yes
								max_width = 500
								elide = right
								using = fontsize_mega
							}
						}

						### BACKGROUND WITH LEADERS SECTION
						widget = {
							size = { 560 274 }

							datamodel = "[GetGlobalList('nda_global_cult_leader_list')]"
							item = {

								widget = {
									size = { 556 274 }
									parentanchor = hcenter

									# COVEN LEADER 1 - centre front
									container = {
										visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0' )]"	
										parentanchor = hcenter
										position = { 0 15 }
										maximumsize = { 100 265 } # This maximumsize is to make the button for this portrait not overlap the other character's buttons
																								
										character_portrait_base = {
											parentanchor = hcenter
											visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0' )]"	

											datacontext = "[Scope.GetCharacter]" 
											size = { 250 270 }

											blockoverride "portrait_size" {
												block "character_portrait_size" {
													size = { 300 300 } # biggest
												}
											}

											blockoverride "portrait_texture" {
												portrait_texture = "[Character.GetAnimatedPortrait('pop_environment', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											}

											blockoverride "portrait_icons" {}
											blockoverride "tooltip" {}
											blockoverride "show_hat" {}
											blockoverride "highlight" {}

											blockoverride "portrait_button" {
												button = {
													parentanchor = hcenter
													size = { 100% 100% }

													block "portrait_button_onclick" {
														onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
													}

													block "portrait_button_onrightclick" {
														onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
													}

													#onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.AccessSelf )]"
													#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												}
											}
										}										
									}	

									# COVEN LEADER 2 - left mid
									container = {
										visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)1' )]" #"[GreaterThan_int32( GetDataModelSize(PowerBloc.GetMembersWithUniqueHeadsOfState), '(int32)3' )]"
										parentanchor = hcenter
										position = { -110 15 }
										maximumsize = { 100 265 } # This maximumsize is to make the button for this portrait not overlap the other character's buttons
										
										character_portrait_base = {
											parentanchor = hcenter

											datacontext = "[Scope.GetCharacter]" 
											size = { 250 270 }

											blockoverride "portrait_size" {
												block "character_portrait_size" {
													size = { 280 280 } # slightly forward so bigger
												}
											}

											blockoverride "portrait_texture" {
												portrait_texture = "[Character.GetAnimatedPortrait('characters_portrait_environment', 'camera_event_left', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											}

											blockoverride "portrait_icons" {}
											blockoverride "tooltip" {}
											blockoverride "show_hat" {}
											blockoverride "highlight" {}

											blockoverride "portrait_button" {
												button = {
													parentanchor = hcenter
													size = { 100% 100% }

													block "portrait_button_onclick" {
														onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
													}

													block "portrait_button_onrightclick" {
														onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
													}

													#onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Scope.GetCharacter )]"
													#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												}
											}
										}
									}

									# COVEN LEADER 4 - left rear
									container = {
										visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)3' )]"	#yes #"[GreaterThan_int32( GetDataModelSize(PowerBloc.GetMembersWithUniqueHeadsOfState), '(int32)3' )]"
										parentanchor = hcenter
										position = { -210 15 }
										maximumsize = { 100 265 } # This maximumsize is to make the button for this portrait not overlap the other character's buttons
										
										character_portrait_base = {
											parentanchor = hcenter

											datacontext = "[Scope.GetCharacter]"  
											size = { 250 270 }

											blockoverride "portrait_size" {
												block "character_portrait_size" {
													size = { 265 265 }
												}
											}

											blockoverride "portrait_texture" {
												portrait_texture = "[Character.GetAnimatedPortrait('characters_portrait_environment', 'camera_event_left', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											}

											blockoverride "portrait_icons" {}
											blockoverride "tooltip" {}
											blockoverride "show_hat" {}
											blockoverride "highlight" {}

											blockoverride "portrait_button" {
												button = {
													parentanchor = hcenter
													size = { 100% 100% }

													block "portrait_button_onclick" {
														onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
													}

													block "portrait_button_onrightclick" {
														onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
													}

													#onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Scope.GetCharacter )]"
													#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												}
											}
										}												
									}

									# COVEN LEADER 3 - right mid
									container = {
										visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)2' )]" #"[GreaterThan_int32( GetDataModelSize(PowerBloc.GetMembersWithUniqueHeadsOfState), '(int32)3' )]"
										parentanchor = hcenter
										position = { 110 15 }
										maximumsize = { 100 265 } # This maximumsize is to make the button for this portrait not overlap the other character's buttons
										
										character_portrait_base = {
											parentanchor = hcenter

											datacontext = "[Scope.GetCharacter]" 
											size = { 250 270 }

											blockoverride "portrait_size" {
												block "character_portrait_size" {
													size = { 280 280 } # slightly forward so bigger
												}
											}

											blockoverride "portrait_texture" {
												portrait_texture = "[Character.GetAnimatedPortrait('characters_portrait_environment', 'camera_event_right', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											}

											blockoverride "portrait_icons" {}
											blockoverride "tooltip" {}
											blockoverride "show_hat" {}
											blockoverride "highlight" {}

											blockoverride "portrait_button" {
												button = {
													parentanchor = hcenter
													size = { 100% 100% }

													block "portrait_button_onclick" {
														onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
													}

													block "portrait_button_onrightclick" {
														onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
													}

													#onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Scope.GetCharacter )]"
													#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												}
											}
										}
									}	

									# COVEN LEADER 5 - right rear
									container = {
										visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)4' )]" #"[GreaterThan_int32( GetDataModelSize(PowerBloc.GetMembersWithUniqueHeadsOfState), '(int32)3' )]"
										parentanchor = hcenter
										position = { 210 15 }
										maximumsize = { 100 265 } # This maximumsize is to make the button for this portrait not overlap the other character's buttons
										
										character_portrait_base = {
											parentanchor = hcenter

											datacontext = "[Scope.GetCharacter]" 
											size = { 250 270 }

											blockoverride "portrait_size" {
												block "character_portrait_size" {
													size = { 265 265 } # slightly forward so bigger
												}
											}

											blockoverride "portrait_texture" {
												portrait_texture = "[Character.GetAnimatedPortrait('characters_portrait_environment', 'camera_event_right', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											}

											blockoverride "portrait_icons" {}
											blockoverride "tooltip" {}
											blockoverride "show_hat" {}
											blockoverride "highlight" {}

											blockoverride "portrait_button" {
												button = {
													parentanchor = hcenter
													size = { 100% 100% }

													block "portrait_button_onclick" {
														onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
													}

													block "portrait_button_onrightclick" {
														onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
													}

													#onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Scope.GetCharacter )]"
													#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												}
											}
										}
									}
	
								}
							}

						}
					}					
				}

            }
        }	
	
	}
}
